/// \file MassPoint.h
/// \brief encapsulates a mass point object for a cloth simulator
/// \author Rachel Strohkorb
/// /// \version 1.0
/// \date 24/1/19 Cleaned up file, added comments

#ifndef MASSPOINT_H_
#define MASSPOINT_H_

#include <vector>
#include <ngl/Vec3.h>
#include <ngl/Mat3.h>
#include "UnorderedPair.h"

//--------------------------------------------------------------------------------------------------------------------------
/// @class MassPoint "include/MassPoint.h"
/// @brief Contains information and operations on masspoints for a cloth object
//--------------------------------------------------------------------------------------------------------------------------
class MassPoint
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint()=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~MassPoint()=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief copy constructor
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint(const MassPoint &)=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move constructor
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint(MassPoint &&)=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief assignment operator
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint & operator = (const MassPoint &) = default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move assignment operator
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint & operator = (MassPoint &&) = default;
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief user constructor sets mass position
    /// @param[in]  _pos the position of this masspoint
    //----------------------------------------------------------------------------------------------------------------------
    MassPoint(ngl::Vec3 _pos) : m_pos(_pos) {;}
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns whether this masspoint is fixed
    /// @returns  whether or not this masspoint is fixed in space
    //----------------------------------------------------------------------------------------------------------------------
    bool fixed() const { return m_fixed; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns current position
    /// @returns  position of this masspoint
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 pos() const { return m_pos; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns current velocity
    /// @returns  velocity of this masspoint
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 vel() const { return m_vel; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns springs belonging to this masspoint
    /// @returns  this masspoints' springs
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<UnorderedPair> mySprings() const { return m_springs; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns the current jacobian matrix of this masspoint
    /// @returns  this masspoints' jacobian matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat3 jacobian() const { return m_jacobian; }
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets velocity
    /// @param[in]  _vel velocity to be set
    //----------------------------------------------------------------------------------------------------------------------
    void setVel(const ngl::Vec3 _vel) { m_vel = _vel; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets position
    /// @param[in]  _pos position to be set
    //----------------------------------------------------------------------------------------------------------------------
    void setPos(const ngl::Vec3 _pos) { m_pos = _pos; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief adds a spring to this masspoints' spring reference list
    /// @param[in]  _s spring to be added
    //----------------------------------------------------------------------------------------------------------------------
    void addSpring(const UnorderedPair _s) { m_springs.push_back(_s); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief updates this masspoints' jacobian matrix to the input value
    /// @param[in]  _j jacobian matrix to be set
    //----------------------------------------------------------------------------------------------------------------------
    void updateJacobian(ngl::Mat3 _j) { m_jacobian = _j; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fixes this point in space and zeroes out its velocity
    //----------------------------------------------------------------------------------------------------------------------
    void fixPoint();
    //----------------------------------------------------------------------------------------------------------------------

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// MEMBER VARIABLES
    //----------------------------------------------------------------------------------------------------------------------
    bool m_fixed = false;                       //!< whether or not this point is fixed
    ngl::Vec3 m_pos = ngl::Vec3(0.0f);          //!< current position
    ngl::Vec3 m_vel = ngl::Vec3(0.0f);          //!< current velocity
    std::vector<UnorderedPair> m_springs;       //!< springs connected to this masspoint
    ngl::Mat3 m_jacobian = ngl::Mat3(0.0f);     //!< this masspoint's jacobian matrix
};

#endif
