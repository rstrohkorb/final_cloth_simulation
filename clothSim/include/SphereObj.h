/// \file SphereObj.h
/// \brief solid sphere for colliding with
/// \author Rachel Strohkorb
/// /// \version 1.0
/// \date 24/1/19 Cleaned up code, added comments

#include <vector>
#include "BVTree.h"

#ifndef SPHEREOBJ_H_
#define SPHEREOBJ_H_

//--------------------------------------------------------------------------------------------------------------------------
/// @class SphereObj "include/SphereObj.h"
/// @brief A simple sphere object, a static object to collide with
//--------------------------------------------------------------------------------------------------------------------------
class SphereObj
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj()=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~SphereObj()=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief copy constructor
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj(const SphereObj &)=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move constructor
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj(SphereObj &&)=default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief assignment operator
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj & operator = (const SphereObj &) = default;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief move assignment operator
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj & operator = (SphereObj &&) = default;
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief user constructor creates sphere object
    /// @param[in]  _radius the radius of the sphere object
    /// @param[in]  _precision level of detail
    //----------------------------------------------------------------------------------------------------------------------
    SphereObj(float _radius, size_t _precision);
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns number of vertices in object
    /// @returns  number of vertices in the sphere
    //----------------------------------------------------------------------------------------------------------------------
    size_t numVertex() const { return m_vertexData.size(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns current number of nodes in the bounding volumes tree
    /// @returns  number of nodes in the bvtree
    //----------------------------------------------------------------------------------------------------------------------
    size_t numNodes() const { return m_tree.numNodes(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns radius
    /// @returns  radius of the sphere object
    //----------------------------------------------------------------------------------------------------------------------
    float radius() const { return m_radius; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns center
    /// @returns  center of the sphere
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 center() const { return m_center; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief exports triangle strip information for drawing
    /// @returns  vertex data formatted for triangle strips
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> exportForDraw() const { return m_vertexData; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief exports individual triangle information for creating a bounding volume tree
    /// @param[out]  o_vertexData the vertex data formatted for triangles
    //----------------------------------------------------------------------------------------------------------------------
    void exportTriangles(std::vector<ngl::Vec3> &o_vertexData) const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief exports the bounding volume tree for this sphere
    /// @returns  this sphere's bvtree
    //----------------------------------------------------------------------------------------------------------------------
    BVTree exportTree() { return m_tree; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getter returns vertices of the given triangle
    /// @param[in]  _triNum the number ID of the triangle to which these vertices belong
    /// @returns  vertices of the given triangle
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> vertFromTriNum(const size_t _triNum) const;
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets whether or not collision is on
    /// @param[in]  _col turns on or off collisions
    //----------------------------------------------------------------------------------------------------------------------
    void setCollision(const bool _col) { m_collision = _col; }
    //----------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initializes this object's bounding volume tree
    //----------------------------------------------------------------------------------------------------------------------
    void init();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief moves the sphere by the given vector
    /// @param[in]  _v vector by which to move the sphere
    //----------------------------------------------------------------------------------------------------------------------
    void moveSphere(const ngl::Vec3 _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief detects collisions with another object in the scene
    /// @param[in]  _eTree bounding volume tree of another object in the scene
    /// @returns  the information on triangle collision detections that occured
    //----------------------------------------------------------------------------------------------------------------------
    ColDetectInfo detectCollision(BVTree _eTree) { return m_tree.detectCollision(_eTree); }
    //----------------------------------------------------------------------------------------------------------------------

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// MEMBER VARIABLES
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_vertexData;    //!< vertex data, formatted in triangle strips
    BVTree m_tree;                          //!< this object's bounding volume tree
    float m_radius;                         //!< radius of the sphere
    ngl::Vec3 m_center = ngl::Vec3(0.0f);   //!< center of the sphere
    bool m_collision = true;                //!< whether or not collisions are on
};

#endif
